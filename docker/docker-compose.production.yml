services:
  server:
    container_name: server
    build:
      dockerfile: ../docker/server.Dockerfile
      context: ../server
      target: production
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - ../.env.example
      - ../server/.env
    ports:
      - "3000:3000"
    networks:
      - server-network
    command: npm run start

  database:
    container_name: database
    image: postgres:alpine
    env_file:
      - ../.env.example
    volumes:
      - database_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - server-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    depends_on:
      - database
    env_file:
      - ../.env.example
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - server-network
    ports:
      - 5050:80

volumes:
  database_data:
  pgadmin_data:

networks:
  server-network:
